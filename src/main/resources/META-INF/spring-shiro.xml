<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     
    http://www.springframework.org/schema/util   
    http://www.springframework.org/schema/util/spring-util-3.0.xsd">  
    <description>Shiro 配置</description>
    
    
    <!-- 用户授权信息Cache, 采用EhCache, -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:META-INF/cache/ehcache-shiro.xml"/>
	</bean>
  
  <!--自定义Realm 继承自AuthorizingRealm -->  
  <bean id="monitorRealm" class="com.longlu.shiro.MonitorRealm"></bean>  
  
  <!-- Shiro的主要业务层对象基于web的应用程序 -->
  <!-- securityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <!--设置自定义realm -->  
        <property name="realm" ref="monitorRealm" />
        <!-- 如果不使用缓存，则jsp中的shiro标签会访问realm中的认证和授权方法，影响页面性能-->
        <property name="cacheManager" ref="shiroEhcacheManager" />
    </bean>  
    
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <property name="securityManager" ref="securityManager" />  
        <property name="loginUrl" value="${loginUrl}" />  
        <property name="successUrl" value="${successUrl}" />  
        <property name="unauthorizedUrl" value="${unauthorizedUrl}" />  
        <property name="filterChainDefinitions">  
            <value>
                /index.html = anon  <!-- anon 表示可以直接访问 -->
                /youzanAuthSuccess.html = anon
                /login.do = anon
                /alibaba_auth.do = anon
				/*.do = authc   <!--authc 表示需要认证才能访问的页面 -->
                /*/*.do = authc 
            </value>
			<!-- Anon：不指定过滤器,不错是这个过滤器是空的，什么都没做，跟没有一样。 
				Authc:验证，这些页面必须验证后才能访问，也就是我们说的登录后才能访问。
				authc, roles[xxx], perms["xxx"]   -->
			<!-- anon:例子/admins/**=anon 没有参数，表示可以匿名使用。
			authc:例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数
			roles：例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。
			perms：例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
			rest：例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等。
			port：例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString
			是你访问的url里的？后面的参数。
			authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证
			ssl:例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
			user:例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查
			注：anon，authcBasic，auchc，user是认证过滤器，
			perms，roles，ssl，rest，port是授权过滤器	 -->
        </property>  
    </bean>
    
</beans>