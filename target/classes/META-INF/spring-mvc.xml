<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd 
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		 http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<context:component-scan base-package="com.longlu">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:include-filter>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"></context:exclude-filter>
    </context:component-scan>

	<!-- 开启注解 -->
	<mvc:annotation-driven />
	<!-- 不拦截所有静态资源 -->
	<mvc:resources location="/" mapping="/**"/>
	<!-- 不拦截静态资源 -->
<!-- 	<mvc:resources location="/images/" mapping="/images/**"/> 
	<mvc:resources location="/css/" mapping="/css/**"/> 
	<mvc:resources location="/static/" mapping="/static/**"/> -->
	
	
	<!-- 如果以后把资源放到web-inf下则可以使用下面配置 -->
	<!-- <mvc:resources location="/WEB-INF/images/" mapping="/images/**"/> -->
<!--	<mvc:resources location="/WEB-INF/view/" mapping="/view/**"/>
	<mvc:resources location="/WEB-INF/scripts/" mapping="/js/**"/>
	<mvc:resources location="/WEB-INF/images/" mapping="/css/img/**"/>
	<mvc:resources location="/WEB-INF/styles/" mapping="/css/**"/> -->
	
	
	
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
			</list>
		</property>
	</bean>
	
	<!--这个ViewResolver 的具体原来没细究，不过CV战士们 中的一员，这样用是没问题的(参考官文) -->  
   <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">  
      <property name="mediaTypes">  
        <map>  
          <entry key="json" value="application/json"/>   <!-- 告诉视图解析器 返回的类型为json 格式 -->  
        </map>  
      </property>  
      <property name="defaultViews">  
        <list>  
          <!-- 这个 View 比较重要,ModelAndView 里的数据变成JSON -->  
          <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">  
          </bean>  
        </list>  
      </property>  
    </bean>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
		<property name="maxUploadSize">
			<value>32505856</value><!-- 上传文件大小限制为31M，31*1024*1024 -->
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>
	
	<!-- 启动shiro注解 start-->
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
 	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
    <bean  class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"  
        depends-on="lifecycleBeanPostProcessor" />
    <bean  class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager" />  
    </bean>
    <!-- 启动shiro注解 end-->
    
    
    
    <!-- freeMarket start -->
    <!-- 配置Freemarker属性文件路径-->
	<bean id="freemarkerConfig"  class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	    <property name="location" value="classpath:META-INF/freemarker.properties" />
	</bean>
	
	<!-- 配置freeMarker模板加載地址 类改为FreeMarkerConfigExtend即可在ftl中使用shiro标签 -->
	<!-- <bean id="freemarkerConfigurer"  class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> -->
	<bean id="freemarkerConfigurer"  class="com.longlu.freemarker.extend.FreeMarkerConfigExtend">
	    <property name="templateLoaderPath" value="/WEB-INF/view/" />
	    
	    <property name="freemarkerVariables">
			<map>
				<entry key="xml_escape" value-ref="fmXmlEscape" />
			</map>
		</property>
		<property name="defaultEncoding">
			<value>utf-8</value>
		</property>
	    
	    <!-- 如果没有 freemarker.properties配置时可以在下面配置相关属性-->
	    <!-- <property name="freemarkerSettings">  
        	<props>  
            <prop key="template_update_delay">0</prop>  
            <prop key="default_encoding">UTF-8</prop>  
            <prop key="number_format">0.##########</prop>  
            <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
            <prop key="classic_compatible">true</prop>  
            <prop key="template_exception_handler">ignore</prop>  
        	</props>  
    	</property> -->
	</bean>
	<!-- 配置freeMarker視圖解析器 -->
	<bean id="freemakerViewResolver"  class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="suffix" value=".ftl" />
		<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
	    <property name="contentType" value="text/html; charset=UTF-8" />
	    <!-- 此变量值为pageContext.request, 页面使用方法：rc.contextPath 就能获得${pageContext.request.contextPath} --> 
	    <property name="exposeRequestAttributes" value="true" />
	    <property name="exposeSessionAttributes" value="true" />
	    <property name="exposeSpringMacroHelpers" value="true" />
	    <property name="requestContextAttribute" value="rc" />
	    <!-- 视图解析器的优先级，当配置多个视图解析器的时候越小越优先 -->
	    <property name="order" value="0" />
	</bean>
	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>
	<!-- freeMarket end -->
	
	
	<!-- 导入其它的配置文件-->
	<!-- <import resource="classpath:META-INF/spring-timetask.xml"/> -->
	<!-- 如果是加载本项目的配置资源可以加上classpath:也可以不指定 -->
	<!-- <import resource="classpath:META=INF/beans-dao.xml"/> -->
	<!-- 如果是加载外部jar中的配置文件则可以通过classpath*: -->
	<!-- <import resource="classpath*:spring-memcache.xml"/> -->
	<!-- <import resource="classpath:META-INF/applicationContext-properties.xml"/> -->
	
	<!-- 使用springUtil工具类加载 applicationContext对象-->
	<bean id="applicationContext" class="com.longlu.util.SpringUtil"/>
	
		<!-- 初始化缓存类接口对象 -->
<!-- 	<bean id="ydataCache" class="com.cache.service.BaseMemcacheProxy">
		<property name="client" ref="memcachedClient"></property>
	</bean> -->
	
	 <!-- 定义跳转的文件的前后缀 ，视图模式配置-->  
    <!--     <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址  
        <property name="prefix" value="/WEB-INF/view/" />  
        <property name="suffix" value=".jsp" />  
    </bean> -->
	<!-- 程序出现异常统一跳转页面 增加shiro异常处理 -->
	<!-- Shiro在注解模式下，登录失败，与没有权限均是通过抛出异常。并且默认并没有去处理或者捕获这些异常。在springMVC下需要配置捕获相应异常来通知用户信息，如果不配置异常会抛出到页面 -->
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                身份认证异常
                <prop key="org.apache.shiro.authz.UnauthenticatedException">
                    redirect:/hello/login.do
                </prop>
                授权异常
                <prop key="org.apache.shiro.authz.UnauthorizedException">
                    redirect:/hello/login.do
                </prop>
				<prop key="java.lang.Exception">error</prop>
            </props>
        </property>
        <property name="defaultErrorView" value="error"/>
    </bean> -->
     
</beans>